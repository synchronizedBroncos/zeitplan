#!/usr/bin/env node

/**
* Module dependencies.
*/

// TODO: make https when we get cert renewed

var app = require('../app');
var debug = require('debug')('zeitplan:server');
// var https = require('https');
var http = require('http');
// var fs = require('fs');

// setup mongodb
var mongo = require('mongodb');
var mongoose = require('mongoose');
// require and config dotenv
require('dotenv').config();

mongoose.connect(process.env.DB_URI, {
  useCreateIndex: true,
  useNewUrlParser: true
})
.then(() => {
  console.log('Connected to db successfully');

  /**
  * Get port from environment and store in Express.
  */

  /* var options = {
    ca: fs.readFileSync('domain/www_zeitplan_me.ca-bundle'),
    key: fs.readFileSync('domain/private-key.pem'),
    cert: fs.readFileSync('domain/www_zeitplan_me.crt')
  } */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
  * Create HTTP server.
  */

  // var server = https.createServer(options, app);
  var server = http.createServer(app);

  /**
  * Listen on provided port, on all network interfaces.
  */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
  * Normalize a port into a number, string, or false.
  */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
  * Event listener for HTTP server "error" event.
  */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
      case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
      default:
      throw error;
    }
  }

  /**
  * Event listener for HTTP server "listening" event.
  */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})
.catch((err) => {
  console.log('Error on start: ' + err.stack);
  process.exit(1);
});

var db = mongoose.connection;
